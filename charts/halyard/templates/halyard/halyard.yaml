{{ range $i, $stage := list "apply" "clean" }}
{{- if and (eq $stage "apply") $.Values.daemon }}
apiVersion: extensions/v1beta1
kind: Deployment
{{- else }}
apiVersion: batch/v1
kind: Job
{{- end }}
metadata:
  name: {{ template "halyard.fullname" $ }}-{{ $stage }}
  labels:
    app: {{ template "halyard.fullname" $ }}
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    heritage: {{ $.Release.Service }}
    release: {{ $.Release.Name }}
  annotations:
    {{- if eq $stage "apply" }}
    {{- if not $.Values.daemon }}
    "helm.sh/hook": post-install,post-upgrade
    {{- end }}
    {{- else }}
    "helm.sh/hook": pre-delete
    {{- end }}
    {{- if not $.Values.daemon }}
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
    {{- end }}
spec:
  template:
    {{- if and (eq $stage "apply") $.Values.daemon }}
    metadata:
      labels:
        app: {{ template "halyard.fullname" $ }}
    {{- end }}
    spec:
      {{- if and (eq $stage "apply") $.Values.daemon }}
      restartPolicy: Always
      {{- else }}
      restartPolicy: Never
      {{- end }}
      serviceAccountName: {{ template "halyard.fullname" $ }}
      containers:
      - name: daemon
        image: "{{ $.Values.image.repository }}{{ $.Values.image.name }}:{{ $.Values.image.tag }}"
        imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
        command:
        - sh
        - -cex
        - |
          mkdir -p ~/.hal
          {{- if $.Values.prepareKubeconfig.enabled }}
          kubectl config set-cluster {{ $.Values.prepareKubeconfig.cluster }} --server=https://kubernetes.default --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          kubectl config set-credentials {{ $.Values.prepareKubeconfig.user }} --token=$token
          kubectl config set-context {{ $.Values.prepareKubeconfig.context }} --cluster={{ $.Values.prepareKubeconfig.cluster }} --user={{ $.Values.prepareKubeconfig.user }}
          kubectl config use-context {{ $.Values.prepareKubeconfig.context }}
          {{- end }}
          {{- range $id, $file := $.Values.files }}
          mkdir -p $(dirname {{ index $file "path" }})
          ln -s /tmp/files{{ index $file "path" }} {{ index $file "path" }}
          {{- end }}
          cp /tmp/conf/halconfig ~/.hal/config
          /opt/halyard/bin/halyard > ~/halyard.log 2>&1 &
          until hal --ready; do sleep 2; done
          {{- if $.Values.minio.deployChart }}
          echo {{ $.Values.minio.secretKey }} | hal config storage s3 edit --endpoint {{ template "halyard.minio-address" $ }} --access-key-id {{ $.Values.minio.accessKey }} --secret-access-key
          hal config storage edit --type s3
          {{- end }}
          hal config deploy edit --location {{ template "halyard.spinnaker-namespace" $ }}
          {{- if $.Values.jenkins.deployChart }}
          echo {{ $.Values.jenkins.Master.AdminPassword }} | hal config ci jenkins master add local --address {{ template "spinnaker.jenkins-address" $ }} --username {{ $.Values.jenkins.Master.AdminUser }} --password
          hal config ci jenkins enable
          {{- end }}
          {{- if eq $stage "apply" }}
          {{ $.Values.command }}
          {{- else }}
          hal -q deploy clean
          {{- end }}
        volumeMounts:
        {{- range $id, $file := $.Values.files }}
        - mountPath: /tmp/files{{ index $file "path" }}
          name: file-{{ $id }}
          subPath: {{ regexFind "[^/]+$" (index $file "path") }}
        {{- end }}
        - mountPath: /tmp/conf
          name: halconfig
      volumes:
      {{- range $id, $file := $.Values.files }}
      - name: file-{{ $id }}
        configMap:
          name: {{ template "halyard.fullname" $ }}-file-{{ $id }}
      {{- end }}
      - name: halconfig
        configMap:
          name: {{ template "halyard.fullname" $ }}-halconfig
---
{{- end }}
