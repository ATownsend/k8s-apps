apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "cassandra.fullname" . }}
  labels:
    app: {{ template "cassandra.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "cassandra.fullname" . }}
  replicas: {{ .Values.config.clusterSize }}
  template:
    metadata:
      labels:
        app: {{ template "cassandra.fullname" . }}
      annotations:
        {{- if .Values.prometheusExporter.enabled }}
        prometheus.io/scrape: "true"
        {{- end }}
    spec:
      {{- if eq .Values.antiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["{{ template "cassandra.fullname" . }}"]
            topologyKey: kubernetes.io/hostname
      {{- else if eq .Values.antiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["{{ template "cassandra.fullname" . }}"]
              topologyKey: kubernetes.io/hostname
      {{- end}}
      terminationGracePeriodSeconds: 60
      containers:
      - name: cassandra
        image: {{ .Values.image.repository }}{{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        lifecycle:
          preStop:
            exec:
              command: ["nodetool", "decommission"]
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: CASSANDRA_SEED_SIZE
          value: "{{ .Values.config.seedSize }}"
        - name: MAX_HEAP_SIZE
          value: {{ default "8192M" .Values.config.maxHeapSize | quote }}
        - name: HEAP_NEWSIZE
          value: {{ default "200M" .Values.config.heapNewSize | quote }}
        - name: CASSANDRA_ENDPOINT_SNITCH
          value: {{ default "SimpleSnitch" .Values.config.endpointSnitch | quote }}
        - name: CASSANDRA_CLUSTER_NAME
          value: {{ default "Cassandra" .Values.config.clusterName | quote }}
        - name: CASSANDRA_DC
          value: {{ default "DC1" .Values.config.dcName | quote }}
        - name: CASSANDRA_RACK
          value: {{ default "RAC1" .Values.config.rackName | quote }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- if .Values.prometheusExporter.enabled }}
        - name: JMX_AGENT
          value: "-javaagent:/etc/cassandra/jmx_prometheus_javaagent-0.9.jar=7070:/etc/cassandra/conf/cassandra-jmx.yml"
        {{- end }}
        livenessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status" ]
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          periodSeconds: {{ .Values.probePeriodSeconds }}
        readinessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status | grep -E \"^UN\\s+${POD_IP}\"" ]
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          periodSeconds: {{ .Values.probePeriodSeconds }}
        ports:
        - name: intra
          containerPort: 7000
        - name: tls
          containerPort: 7001
        - name: jmx
          containerPort: 7199
        {{- if .Values.prometheusExporter.enabled }}
        - name: jmx-agent
          containerPort: 7070
        {{- end }}
        - name: cql
          containerPort: {{ default 9042 .Values.config.ports.cql }}
        - name: thrift
          containerPort: {{ default 9160 .Values.config.ports.thrift }}
        volumeMounts:
        {{- if .Values.logCollector.enabled }}
        - name: logdir
          mountPath: /var/log/cassandra
        {{- end }}
        {{- if .Values.prometheusExporter.enabled }}
        - name: cassandra-jmx
          mountPath: /etc/cassandra/conf
        {{- end }}
        - name: data
          mountPath: /var/lib/cassandra
      {{- if .Values.logCollector.enabled }}
      - name: filebeat
        image: "{{ .Values.logCollector.image.repository }}{{ .Values.logCollector.image.name }}:{{ .Values.logCollector.image.tag }}"
        imagePullPolicy: {{ .Values.logCollector.image.pullPolicy | quote }}
        volumeMounts:
        - name: filebeat-config
          mountPath: /etc/filebeat
        - name: logdir
          mountPath: /var/log/cassandra
        command:
          - "filebeat"
          - "-c"
          - "/etc/filebeat/filebeat.yml"
          - "-e"
          - "-d"
          - "\"*\""
      {{- end }}
      volumes:
        {{- if eq .Values.persistence.type "emptyDir" }}
        - name: data
          emptyDir: {}
        {{- else if eq .Values.persistence.type "hostPath" }}
        - name: data
          hostPath:
            path: "{{ .Values.persistence.hostPath }}"
        {{- end }}
        {{- if .Values.prometheusExporter.enabled }}
        - name: cassandra-jmx
          configMap:
            name: {{ template "cassandra.fullname" . }}
        {{- end }}
        {{- if .Values.logCollector.enabled }}
        - name: filebeat-config
          configMap:
            name: {{ printf "cas-fb-%s" .Release.Name | trunc 55 | trimSuffix "-" }}
            items:
              - key: filebeat-yml
                path: filebeat.yml
        - name: logdir
          emptyDir: {}
        {{- end }}

  {{- if eq .Values.persistence.type "PersistentVolumeClaim" }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ template "cassandra.fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      {{- if .Values.persistence.storageClass }}
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.persistence.storageClass }}
      {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.volumeSize }}
  {{- end }}
