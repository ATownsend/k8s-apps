apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "ls-cm-fullname" . }}
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "ls-fullname" . }}
data:
  logstash-conf: |
    input {
        beats {
          port => 5043
        }
    }
    filter {
        if ([fields][log_host] == "prometheus") {
          grok {
            match => {
              "message" => ['time="%{TIMESTAMP_ISO8601:message_time}" level=%{LOGLEVEL:log_level} msg="%{GREEDYDATA:message}"',"%{GREEDYDATA:message}"]
            }
            overwrite => [ "message" ]
            add_field => {
              "received_at"   => "%{@timestamp}"
              "received_from" => "%{host}"
              "app"           => "prometheus"
            }
            remove_field => [
              "beat",
              "input_type",
              "offset",
              "fields",
              "tags",
              "host",
              "type"
            ]
          }
        } else if ([fields][log_host] == "kafka") {
            grok {
                match => {
                    "message" => [
                        "\[%{TIMESTAMP_ISO8601:message_time}\] %{LOGLEVEL:log_level} \[%{GREEDYDATA:source}\]\: %{GREEDYDATA:message} \(%{GREEDYDATA:class}\)",
                        "%{GREEDYDATA:message}"
                    ]
                }
                overwrite => [ "source", "message" ]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "received_from" => "%{host}"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
            }
        } else if ([fields][log_host] == "zeppelin") {
            grok {
                match => {
                    "message" => [
                        "%{WORD:trace_level} \[%{TIMESTAMP_ISO8601:message_time}\] \(\{%{GREEDYDATA:thread}\} %{GREEDYDATA:source}\) - %{GREEDYDATA:message}",
                        "%{GREEDYDATA:message}"
                    ]
                }
                overwrite => [ "message", "source" ]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "received_from" => "%{host}"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
            }
        } else if ([fields][log_host] == "spark") {
            grok {
              match => {
                "message" => [
                   "\[%{LOGLEVEL:trace_level}\] %{TIMESTAMP_ISO8601:message_time} %{GREEDYDATA:message}"
                ]
              }
              overwrite => [ "message"]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "received_from" => "%{host}"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
            }
        } else if ([fields][log_host] == "cassandra") {
              grok {
                match => ["message", "%{LOGLEVEL:log_level} \s?\[%{GREEDYDATA:thread}\] %{TIMESTAMP_ISO8601:message_time} %{GREEDYDATA:message}"
                    ]
                overwrite => [ "message" ]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "received_from" => "%{host}"
                    "app" => "cassandra"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
              }
        } else if ([fields][log_host] == "mariadb") {
            grok {
                match => {
                  "message" => [
                      "(?m)^%{NUMBER:date}\s+%{NOTSPACE:time}\s+%{GREEDYDATA:message}",
                      "(?m)\[%{NOTSPACE:severity}\] %{GREEDYDATA:message}",
                      "(?m)(\s)+%{NOTSPACE:severity} %{GREEDYDATA:message}",
                      "%{GREEDYDATA:message}"
                  ]
                }
                overwrite => [ "message" ]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "received_from" => "%{host}"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
            }
        } else if ([fields][log_host] == "mongodb") {
            grok {
                match => {
                    "message" => ["%{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\[%{DATA:context}\])? %{GREEDYDATA:message}"]
                }
                overwrite => [ "message" ]
                add_field => {
                    "received_at" => "%{@timestamp}"
                    "reveived_from" => "%{host}"
                    "app" => "mongodb"
                }
                remove_field => [
                    "beat",
                    "input_type",
                    "offset",
                    "fields",
                    "tags",
                    "host",
                    "type"
                ]
            }
        } else {
            grok {
                match => {
                    "message" => ["%{GREEDYDATA:message}"]
                }
                overwrite => [ "message" ]
                add_field => {
                    "received_from" => "%{host}"
                }
            }
        }
    }

    output {
        elasticsearch {
            hosts => ["{{ template "ls-es-url" . }}"]
            index => "%{received_from}-%{+MM.dd.YYYY}"
        }
        stdout { codec => json }
    }
