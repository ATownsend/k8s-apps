apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "rollout.fullname" . }}-cleanup
data:
  cleanup.json: |
    {
      "application": "cddemo",
      "name": "Twitter Analytics UI: Cleanup",
      "appConfig": {},
      "keepWaitingPipelines": false,
      "lastModifiedBy": "anonymous",
      "limitConcurrent": true,
      "stages": [
        {
          "account": "local",
          "annotations": {},
          "application": "cddemo",
          "cloudProvider": "kubernetes",
          "cloudProviderType": "kubernetes",
          "containers": [
            {
              "args": [],
              "command": [
                "sh",
                "-cx",
                "kubectl --context frontend delete ns stage ; helm --kube-context frontend list -q | grep stage | xargs helm --kube-context frontend delete --purge  ; kubectl --context backend delete ns stage ; helm --kube-context backend list -q | grep stage | xargs helm --kube-context backend delete --purge ; true"
              ],
              "envVars": [
                {
                  "name": "KUBECONFIG",
                  "value": "/etc/kube/frontend:/etc/kube/backend"
                }
              ],
              "imageDescription": {
                "account": "dockerhub",
                "imageId": "index.docker.io/{{ .Values.spinnaker.jenkins.Agent.image.repository }}{{ .Values.spinnaker.jenkins.Agent.image.name }}:{{ .Values.spinnaker.jenkins.Agent.image.tag }}",
                "registry": "index.docker.io",
                "repository": "{{ .Values.spinnaker.jenkins.Agent.image.repository }}{{ .Values.spinnaker.jenkins.Agent.image.name }}",
                "tag": "{{ .Values.spinnaker.jenkins.Agent.image.tag }}"
              },
              "imagePullPolicy": "ALWAYS",
              "limits": {},
              "name": "deploy",
              "ports": [
                {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP"
                }
              ],
              "requests": {},
              "volumeMounts": [
                {
                  "mountPath": "/etc/kube",
                  "name": "1517411152286",
                  "readOnly": false
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "labels": {},
          "name": "Cleanup STAGE",
          "namespace": "{{ .Release.Namespace }}",
          "refId": "1",
          "requisiteStageRefIds": [],
          "type": "runJob",
          "volumeSources": [
            {
              "configMap": {
                "configMapName": "{{ template "rollout.fullname" . }}-kube",
                "items": []
              },
              "defaultPersistentVolumeClaim": {
                "claimName": "",
                "readOnly": true
              },
              "emptyDir": {
                "medium": "DEFAULT"
              },
              "hostPath": {
                "path": "/"
              },
              "name": "1517411152286",
              "persistentVolumeClaim": {
                "claimName": "",
                "readOnly": true
              },
              "secret": {
                "secretName": ""
              },
              "type": "CONFIGMAP"
            }
          ]
        },
        {
          "account": "local",
          "annotations": {},
          "application": "cddemo",
          "cloudProvider": "kubernetes",
          "cloudProviderType": "kubernetes",
          "containers": [
            {
              "args": [],
              "command": [
                "sh",
                "-cx",
                "kubectl --context frontend delete ns prod ; helm --kube-context frontend list -q | grep prod | xargs helm --kube-context frontend delete --purge  ; kubectl --context backend delete ns prod ; helm --kube-context backend list -q | grep prod | xargs helm --kube-context backend delete --purge ; true"
              ],
              "envVars": [
                {
                  "name": "KUBECONFIG",
                  "value": "/etc/kube/frontend:/etc/kube/backend"
                }
              ],
              "imageDescription": {
                "account": "dockerhub",
                "imageId": "index.docker.io/{{ .Values.spinnaker.jenkins.Agent.image.repository }}{{ .Values.spinnaker.jenkins.Agent.image.name }}:{{ .Values.spinnaker.jenkins.Agent.image.tag }}",
                "registry": "index.docker.io",
                "repository": "{{ .Values.spinnaker.jenkins.Agent.image.repository }}{{ .Values.spinnaker.jenkins.Agent.image.name }}",
                "tag": "{{ .Values.spinnaker.jenkins.Agent.image.tag }}"
              },
              "imagePullPolicy": "ALWAYS",
              "limits": {},
              "name": "deploy",
              "ports": [
                {
                  "containerPort": 80,
                  "name": "http",
                  "protocol": "TCP"
                }
              ],
              "requests": {},
              "volumeMounts": [
                {
                  "mountPath": "/etc/kube",
                  "name": "1517411152286",
                  "readOnly": false
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "labels": {},
          "name": "Cleanup PROD",
          "namespace": "{{ .Release.Namespace }}",
          "refId": "2",
          "requisiteStageRefIds": [
            "1"
          ],
          "type": "runJob",
          "volumeSources": [
            {
              "configMap": {
                "configMapName": "{{ template "rollout.fullname" . }}-kube",
                "items": []
              },
              "defaultPersistentVolumeClaim": {
                "claimName": "",
                "readOnly": true
              },
              "emptyDir": {
                "medium": "DEFAULT"
              },
              "hostPath": {
                "path": "/"
              },
              "name": "1517411152286",
              "persistentVolumeClaim": {
                "claimName": "",
                "readOnly": true
              },
              "secret": {
                "secretName": ""
              },
              "type": "CONFIGMAP"
            }
          ]
        }
      ],
      "triggers": []
    }